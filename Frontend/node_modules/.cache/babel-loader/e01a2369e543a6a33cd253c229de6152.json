{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VAvatar.css\"; // Components\n\nimport { VIcon } from \"../VIcon/index.mjs\";\nimport { VImg } from \"../VImg/index.mjs\"; // Composables\n\nimport { genOverlays, makeVariantProps, useVariant } from \"../../composables/variant.mjs\";\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { makeDensityProps, useDensity } from \"../../composables/density.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeSizeProps, useSize } from \"../../composables/size.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\"; // Utilities\n\nimport { defineComponent, propsFactory, useRender } from \"../../util/index.mjs\";\nexport const makeVAvatarProps = propsFactory({\n  start: Boolean,\n  end: Boolean,\n  icon: IconValue,\n  image: String,\n  ...makeDensityProps(),\n  ...makeRoundedProps(),\n  ...makeSizeProps(),\n  ...makeTagProps(),\n  ...makeVariantProps({\n    variant: 'text'\n  })\n});\nexport const VAvatar = defineComponent({\n  name: 'VAvatar',\n  props: makeVAvatarProps(),\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      colorClasses,\n      colorStyles,\n      variantClasses\n    } = useVariant(props);\n    const {\n      densityClasses\n    } = useDensity(props);\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const {\n      sizeClasses,\n      sizeStyles\n    } = useSize(props);\n    useRender(() => {\n      var _slots$default;\n\n      return _createVNode(props.tag, {\n        \"class\": ['v-avatar', {\n          'v-avatar--start': props.start,\n          'v-avatar--end': props.end\n        }, colorClasses.value, densityClasses.value, roundedClasses.value, sizeClasses.value, variantClasses.value],\n        \"style\": [colorStyles.value, sizeStyles.value]\n      }, {\n        default: () => [props.image ? _createVNode(VImg, {\n          \"key\": \"image\",\n          \"src\": props.image,\n          \"alt\": \"\"\n        }, null) : props.icon ? _createVNode(VIcon, {\n          \"key\": \"icon\",\n          \"icon\": props.icon\n        }, null) : (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots), genOverlays(false, 'v-avatar')]\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"mDAAA;;AACA,uB,CAEA;;SACSA,a;SACAC,Y,qBAET;;SACSC,aAAaC,kBAAkBC,kB;SAC/BC,iB;SACAC,kBAAkBC,kB;SAClBC,kBAAkBC,kB;SAClBC,eAAeC,e;SACfC,oB,6BAET;;SACSC,iBAAiBC,cAAcC,iB;AAExC,OAAO,MAAMC,gBAAgB,GAAGF,YAAY,CAAC;EAC3CG,KAAK,EAAEC,OADoC;EAE3CC,GAAG,EAAED,OAFsC;EAG3CE,IAAI,EAAEf,SAHqC;EAI3CgB,KAAK,EAAEC,MAJoC;EAM3C,GAAGhB,gBAAgB,EANwB;EAO3C,GAAGE,gBAAgB,EAPwB;EAQ3C,GAAGE,aAAa,EAR2B;EAS3C,GAAGE,YAAY,EAT4B;EAU3C,GAAGT,gBAAgB,CAAC;IAAEoB,OAAO,EAAE;EAAX,CAAD;AAVwB,CAAD,CAArC;AAaP,OAAO,MAAMC,OAAO,GAAGX,eAAe,CAAC;EACrCY,IAAI,EAAE,SAD+B;EAGrCC,KAAK,EAAEV,gBAAgB,EAHc;;EAKrCW,KAAK,CAAED,KAAF,QAAoB;IAAA,IAAX;MAAEE;IAAF,IAAWC;IACvB,MAAM;MAAEC,YAAF;MAAgBC,WAAhB;MAA6BC;IAA7B,IAAgD5B,UAAU,CAACsB,KAAD,CAAhE;IACA,MAAM;MAAEO;IAAF,IAAqB1B,UAAU,CAACmB,KAAD,CAArC;IACA,MAAM;MAAEQ;IAAF,IAAqBzB,UAAU,CAACiB,KAAD,CAArC;IACA,MAAM;MAAES,WAAF;MAAeC;IAAf,IAA8BzB,OAAO,CAACe,KAAD,CAA3C;IAEAX,SAAS,CAAC;MAAA;;MAAA;QAAA,SAEC,CACL,UADK,EAEL;UACE,mBAAmBW,KAAK,CAACT,KAD3B;UAEE,iBAAiBS,KAAK,CAACP;QAFzB,CAFK,EAMLW,YAAY,CAACO,KANR,EAOLJ,cAAc,CAACI,KAPV,EAQLH,cAAc,CAACG,KARV,EASLF,WAAW,CAACE,KATP,EAULL,cAAc,CAACK,KAVV,CAFD;QAAA,SAcC,CACLN,WAAW,CAACM,KADP,EAELD,UAAU,CAACC,KAFN;MAdD;QAAAC,gBAmBJZ,KAAK,CAACL,KAANK;UAAA,OACa,OADb;UAAA,OAC2BA,KAAK,CAACL,KADjC;UAAA,OAC6C;QAD7C,WAEEK,KAAK,CAACN,IAANM;UAAA,OACc,MADd;UAAA,QAC4BA,KAAK,CAACN;QADlC,6BAEEQ,KAAK,CAACU,OAFR,qBAEEC,0BAvBA,EA0BJrC,WAAW,CAAC,KAAD,EAAQ,UAAR,CA1BP;MAAA;IAAD,EAATa;IA8BA,OAAO,EAAP;EACD;;AA1CoC,CAAD,CAA/B","names":["VIcon","VImg","genOverlays","makeVariantProps","useVariant","IconValue","makeDensityProps","useDensity","makeRoundedProps","useRounded","makeSizeProps","useSize","makeTagProps","defineComponent","propsFactory","useRender","makeVAvatarProps","start","Boolean","end","icon","image","String","variant","VAvatar","name","props","setup","slots","_ref","colorClasses","colorStyles","variantClasses","densityClasses","roundedClasses","sizeClasses","sizeStyles","value","default","_slots$default"],"sources":["../../../src/components/VAvatar/VAvatar.tsx"],"sourcesContent":["// Styles\nimport './VAvatar.sass'\n\n// Components\nimport { VIcon } from '@/components/VIcon'\nimport { VImg } from '@/components/VImg'\n\n// Composables\nimport { genOverlays, makeVariantProps, useVariant } from '@/composables/variant'\nimport { IconValue } from '@/composables/icons'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { defineComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVAvatarProps = propsFactory({\n  start: Boolean,\n  end: Boolean,\n  icon: IconValue,\n  image: String,\n\n  ...makeDensityProps(),\n  ...makeRoundedProps(),\n  ...makeSizeProps(),\n  ...makeTagProps(),\n  ...makeVariantProps({ variant: 'text' } as const),\n})\n\nexport const VAvatar = defineComponent({\n  name: 'VAvatar',\n\n  props: makeVAvatarProps(),\n\n  setup (props, { slots }) {\n    const { colorClasses, colorStyles, variantClasses } = useVariant(props)\n    const { densityClasses } = useDensity(props)\n    const { roundedClasses } = useRounded(props)\n    const { sizeClasses, sizeStyles } = useSize(props)\n\n    useRender(() => (\n      <props.tag\n        class={[\n          'v-avatar',\n          {\n            'v-avatar--start': props.start,\n            'v-avatar--end': props.end,\n          },\n          colorClasses.value,\n          densityClasses.value,\n          roundedClasses.value,\n          sizeClasses.value,\n          variantClasses.value,\n        ]}\n        style={[\n          colorStyles.value,\n          sizeStyles.value,\n        ]}\n      >\n        { props.image\n          ? (<VImg key=\"image\" src={ props.image } alt=\"\" />)\n          : props.icon\n            ? (<VIcon key=\"icon\" icon={ props.icon } />)\n            : slots.default?.()\n        }\n\n        { genOverlays(false, 'v-avatar') }\n      </props.tag>\n    ))\n\n    return {}\n  },\n})\n\nexport type VAvatar = InstanceType<typeof VAvatar>\n"]},"metadata":{},"sourceType":"module"}